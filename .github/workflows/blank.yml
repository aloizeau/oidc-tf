name: Run Terraform with OpenID Connect
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  analysis:
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: terraform
    name: Analyse the Terraform üîé
    environment: prod
    permissions:
      actions: read
      contents: read
      id-token: write
      pull-requests: write
      security-events: write
      statuses: write
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Fmt
        run: terraform fmt -check -recursive
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
          -backend-config="key=prod.terraform.tfstate"
      - name: Terraform Validate
        run: terraform validate -no-color
      - name: Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # This will add both a CLI output to the console and create a results.sarif file
          output_format: cli,sarif
          output_file_path: console,results.sarif
          quiet: true # optional: display only failed checks
          soft_fail: true # optional: do not return an error code if there are failed checks          
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy-to-prod:
    if: github.event_name != 'pull_request'
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: terraform
    name: Deploy IaC to Prod üèóÔ∏è
    environment: prod
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
          -backend-config="key=prod.terraform.tfstate"
      - name: Terraform Apply
        run: terraform apply -auto-approve

  package:
    name: Package app üì¶
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: deploy-to-prod
    steps:
      - uses: actions/checkout@v4
      - uses: actions/upload-artifact@v3
        with:
          name: app
          path: |
            .
            !./README.md
            !.github/**
            !terraform/**
  deploy:
    name: Deploy code source on web app üöÄ
    permissions:
      id-token: write
      contents: none
    runs-on: ubuntu-latest
    needs: package
    environment:
      name: prod
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app
          path: ./app
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "Deploy to Azure WebApp"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2.2.10
        with:
          app-name: app-alu-prod-001
          package: ./app
